// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Feature } from '../experiment/feature.js';


export class Data {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Data {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsData(bb:flatbuffers.ByteBuffer, obj?:Data):Data {
  return (obj || new Data()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsData(bb:flatbuffers.ByteBuffer, obj?:Data):Data {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Data()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

data(obj?:Feature):Feature|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Feature()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startData(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addData(builder:flatbuffers.Builder, dataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, dataOffset, 0);
}

static endData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createData(builder:flatbuffers.Builder, dataOffset:flatbuffers.Offset):flatbuffers.Offset {
  Data.startData(builder);
  Data.addData(builder, dataOffset);
  return Data.endData(builder);
}
}
